# Imports das bibliotecas
import pysentiment2 as ps
import pandas as pd
import numpy as np
import json
import urllib.request
import matplotlib.pyplot as plt
from langchain_community.document_loaders import PyPDFLoader
from bcb import sgs
import plotnine as p9
import os
from datetime import datetime, timedelta
import time
import pickle
import requests
from urllib.error import URLError
import warnings
warnings.filterwarnings('ignore')
import urllib
import seaborn as sns
import matplotlib.dates as mdates


# === 1. fun√ß√µes para baixar atas do COPOM ===

def baixar_atas_incremental(quantidade=100, arquivo_progresso="atas_progresso.pkl"):
    """
    Baixa atas do COPOM de forma incremental, salvando o progresso.
    
    Args:
        quantidade: N√∫mero de atas para baixar
        arquivo_progresso: Nome do arquivo para salvar o progresso
    """
    
    print(f"üöÄ Iniciando download de {quantidade} atas...")
    
    # 1. Buscar metadados das atas
    try:
        url_api = f"https://www.bcb.gov.br/api/servico/sitebcb/copomminutes/ultimas?quantidade={quantidade}&filtro=Id%20ne%20%27235%27"
        with urllib.request.urlopen(url_api) as response:
            dados = json.load(response)["conteudo"]
        
        df_base = pd.DataFrame(dados).assign(
            Url=lambda x: "https://www.bcb.gov.br/" + x.Url
        )
        print(f"‚úÖ Metadados obtidos: {len(df_base)} atas encontradas")
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar metadados: {e}")
        return None
    
    # 2. Verificar se existe progresso anterior
    atas_processadas = []
    indice_inicio = 0
    
    if os.path.exists(arquivo_progresso):
        try:
            with open(arquivo_progresso, 'rb') as f:
                atas_processadas = pickle.load(f)
            indice_inicio = len(atas_processadas)
            print(f"üìÇ Progresso anterior encontrado: {indice_inicio} atas j√° processadas")
        except:
            print("‚ö†Ô∏è  Erro ao carregar progresso anterior, iniciando do zero")
    
    # 3. Processar atas restantes
    total = len(df_base)
    for i in range(indice_inicio, total):
        try:
            row = df_base.iloc[i]
            print(f"\nüìÑ Processando ata {i+1}/{total}: {row.get('Titulo', 'Sem t√≠tulo')}")
            print(f"üîó URL: {row['Url']}")
            
            inicio = time.time()
            
            # Carregar e extrair texto do PDF
            loader = PyPDFLoader(row['Url'])
            documentos = loader.load()
            conteudo = " ".join(doc.page_content for doc in documentos)
            
            # Criar dicion√°rio com todos os dados
            ata_processada = row.to_dict()
            ata_processada['conteudo'] = conteudo
            ata_processada['processado_em'] = datetime.now().isoformat()
            ata_processada['tempo_processamento'] = round(time.time() - inicio, 2)
            
            atas_processadas.append(ata_processada)
            
            # Salvar progresso ap√≥s cada sucesso
            with open(arquivo_progresso, 'wb') as f:
                pickle.dump(atas_processadas, f)
            
            tempo = round(time.time() - inicio, 2)
            print(f"‚úÖ Ata processada em {tempo}s | Total: {len(atas_processadas)}")
            
            # Pequena pausa para n√£o sobrecarregar o servidor
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå Erro ao processar ata {i+1}: {str(e)}")
            print("‚è≠Ô∏è  Continuando com a pr√≥xima...")
            continue
    
    # 4. Converter para DataFrame final
    if atas_processadas:
        df_final = pd.DataFrame(atas_processadas)
        print(f"\nüéâ Processamento conclu√≠do!")
        print(f"üìä Total processado: {len(df_final)} atas")
        print(f"üíæ Progresso salvo em: {arquivo_progresso}")
        
        return df_final
    else:
        print("‚ùå Nenhuma ata foi processada com sucesso")
        return None

def carregar_progresso(arquivo_progresso="atas_progresso.pkl"):
    """Carrega o progresso salvo como DataFrame"""
    try:
        with open(arquivo_progresso, 'rb') as f:
            atas = pickle.load(f)
        df = pd.DataFrame(atas)
        print(f"üìÇ Carregadas {len(df)} atas do arquivo de progresso")
        return df
    except FileNotFoundError:
        print("‚ùå Arquivo de progresso n√£o encontrado")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao carregar progresso: {e}")
        return None

def salvar_csv(df, nome_arquivo="atas_copom.csv"):
    """Salva o DataFrame em CSV"""
    try:
        df.to_csv(nome_arquivo, index=False, encoding='utf-8')
        print(f"üíæ Dados salvos em: {nome_arquivo}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar CSV: {e}")


# === 3. fun√ß√µes para baixar os dados da selic de forma recursiva ===
def baixar_historico_ano_a_ano(codigo_sgs, nome_arquivo):

    """
    Baixa o hist√≥rico de uma s√©rie do SGS, um ano por vez, para evitar erros de conex√£o.
    
    Args:
        codigo_sgs (int): O c√≥digo da s√©rie no sistema SGS do BCB.
        nome_arquivo (str): O nome do arquivo .csv para salvar os dados.
    
    Returns:
        pd.DataFrame: DataFrame com os dados hist√≥ricos da s√©rie
    """
    
    # Se o arquivo j√° existe, carrega e retorna
    if os.path.exists(nome_arquivo):
        print(f"‚úÖ O arquivo '{nome_arquivo}' j√° existe. Carregando dados existentes...")
        df_existente = pd.read_csv(nome_arquivo, index_col=0, parse_dates=True)
        return df_existente

    print(f"Iniciando download do hist√≥rico para o c√≥digo {codigo_sgs}.")
    print("O processo ser√° feito ano a ano para maior estabilidade...")

    # Define o intervalo de anos para buscar (√∫ltimos 11 anos para garantir 10 anos completos)
    ano_atual = datetime.now().year
    ano_inicial = ano_atual - 13
    
    lista_de_dataframes_anuais = []
    
    try:
        # Loop para buscar cada ano individualmente
        for ano in range(ano_inicial, ano_atual + 1):
            
            print(f"  -> Buscando dados para o ano de {ano}...")
            
            # Define o primeiro e o √∫ltimo dia do ano
            data_inicio = f'{ano}-01-01'
            data_fim = f'{ano}-12-31'
            
            # Realiza a chamada √† API para o ano espec√≠fico
            df_ano = sgs.get({ 'serie': codigo_sgs }, start=data_inicio, end=data_fim)
            
            if not df_ano.empty:
                lista_de_dataframes_anuais.append(df_ano)
            
            # Pausa de 1 segundo: essencial para n√£o sobrecarregar o servidor do BCB
            time.sleep(1)

        if not lista_de_dataframes_anuais:
            print("‚ùå Nenhum dado foi retornado pela API. Verifique o c√≥digo da s√©rie e sua conex√£o.")
            return pd.DataFrame()  # Retorna DataFrame vazio

        # Consolida todos os dataframes anuais em um √∫nico
        print("\nConsolidando todos os dados anuais...")
        df_final = pd.concat(lista_de_dataframes_anuais)
        
        # Remove duplicados, caso haja alguma sobreposi√ß√£o
        df_final = df_final[~df_final.index.duplicated(keep='first')]

        # Salva o resultado em um arquivo CSV
        df_final.to_csv(nome_arquivo)
        
        print(f"üéâ Sucesso! Hist√≥rico completo salvo no arquivo '{nome_arquivo}'.")
        print(f"Total de {len(df_final)} registros baixados de {df_final.index.min().year} a {df_final.index.max().year}.")
        
        return df_final

    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro durante o processo: {e}")
        print("Verifique sua conex√£o com a internet ou tente novamente mais tarde.")
        return pd.DataFrame()  # Retorna DataFrame vazio em caso de erro



# === 3. EVOLU√á√ÉO TEMPORAL DO SENTIMENTO ===


def plot_sentimento_temporal(df):
    """Gr√°fico de linha mostrando evolu√ß√£o do sentimento ao longo do tempo"""
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10))
    
    # Gr√°fico 1: Score num√©rico com m√©dia m√≥vel
    ax1.plot(df['DataReferencia'], df['sentimento'], 'o-', alpha=0.7, label='Score de Sentimento')
    
    # Adiciona m√©dia m√≥vel de 6 meses
    df_sorted = df.sort_values('DataReferencia')
    rolling_mean = df_sorted['sentimento'].rolling(window=6, center=True).mean()
    ax1.plot(df_sorted['DataReferencia'], rolling_mean, 'r-', linewidth=3, label='M√©dia M√≥vel (6 per√≠odos)')
    
    ax1.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    ax1.set_title('Evolu√ß√£o do Sentimento das Atas do COPOM', fontsize=16, fontweight='bold')
    ax1.set_ylabel('Score de Sentimento')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Gr√°fico 2: Classifica√ß√£o por cores
    colors = {'Positivo': 'green', 'Negativo': 'red', 'Neutro': 'gray'}
    for classificacao in df['classificacao'].unique():
        mask = df['classificacao'] == classificacao
        ax2.scatter(df[mask]['DataReferencia'], df[mask]['sentimento'], 
                   c=colors[classificacao], label=classificacao, s=60, alpha=0.8)
    
    ax2.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    ax2.set_title('Sentimento por Classifica√ß√£o', fontsize=14)
    ax2.set_xlabel('Data')
    ax2.set_ylabel('Score de Sentimento')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

# === 4. DISTRIBUI√á√ÉO E ESTAT√çSTICAS ===
def plot_distribuicao_sentimento(df):
    """An√°lise da distribui√ß√£o dos scores de sentimento"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    
    # Histograma dos scores
    ax1.hist(df['sentimento'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    ax1.axvline(df['sentimento'].mean(), color='red', linestyle='--', 
                label=f'M√©dia: {df["sentimento"].mean():.3f}')
    ax1.set_title('Distribui√ß√£o dos Scores de Sentimento')
    ax1.set_xlabel('Score de Sentimento')
    ax1.set_ylabel('Frequ√™ncia')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Boxplot por classifica√ß√£o
    sns.boxplot(data=df, x='classificacao', y='sentimento', ax=ax2)
    ax2.set_title('Distribui√ß√£o por Classifica√ß√£o')
    ax2.set_ylabel('Score de Sentimento')
    
    # Gr√°fico de pizza - propor√ß√£o das classifica√ß√µes
    classificacao_counts = df['classificacao'].value_counts()
    ax3.pie(classificacao_counts.values, labels=classificacao_counts.index, autopct='%1.1f%%',
            colors=['lightgreen', 'lightcoral', 'lightgray'])
    ax3.set_title('Propor√ß√£o das Classifica√ß√µes de Sentimento')
    
    # Q-Q plot para normalidade
    from scipy import stats
    stats.probplot(df['sentimento'], dist="norm", plot=ax4)
    ax4.set_title('Q-Q Plot - Teste de Normalidade')
    
    plt.tight_layout()
    return fig

# === 5. AN√ÅLISE TEMPORAL AVAN√áADA ===
def plot_analise_temporal_avancada(df):
    """Heatmaps e an√°lises sazonais"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # Preparar dados temporais
    df_temp = df.copy()
    df_temp['Ano'] = df_temp['DataReferencia'].dt.year
    df_temp['Mes'] = df_temp['DataReferencia'].dt.month
    df_temp['Trimestre'] = df_temp['DataReferencia'].dt.quarter
    
    # Heatmap Ano x M√™s
    pivot_mes = df_temp.groupby(['Ano', 'Mes'])['sentimento'].mean().unstack()
    sns.heatmap(pivot_mes, annot=True, fmt='.3f', cmap='RdYlGn', center=0, ax=ax1)
    ax1.set_title('Heatmap: Sentimento M√©dio por Ano e M√™s')
    
    # Boxplot por trimestre
    sns.boxplot(data=df_temp, x='Trimestre', y='sentimento', ax=ax2)
    ax2.set_title('Sentimento por Trimestre')
    ax2.set_xlabel('Trimestre')
    
    # Evolu√ß√£o anual
    sentimento_anual = df_temp.groupby('Ano')['sentimento'].agg(['mean', 'std']).reset_index()
    ax3.errorbar(sentimento_anual['Ano'], sentimento_anual['mean'], 
                yerr=sentimento_anual['std'], marker='o', capsize=5)
    ax3.set_title('Sentimento M√©dio Anual (com Desvio Padr√£o)')
    ax3.set_xlabel('Ano')
    ax3.set_ylabel('Sentimento M√©dio')
    ax3.grid(True, alpha=0.3)
    
    # Volatilidade (desvio padr√£o m√≥vel)
    df_sorted = df_temp.sort_values('DataReferencia')
    rolling_std = df_sorted['sentimento'].rolling(window=6).std()
    ax4.plot(df_sorted['DataReferencia'], rolling_std, 'purple', linewidth=2)
    ax4.set_title('Volatilidade do Sentimento (Desvio Padr√£o M√≥vel)')
    ax4.set_xlabel('Data')
    ax4.set_ylabel('Volatilidade')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

# === 6. CORRELA√á√ÉO COM SELIC (se dispon√≠vel) ===
def plot_correlacao_selic(df_sentimento, df_selic):
    """An√°lise de correla√ß√£o entre sentimento e taxa Selic"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # Merge dos dados por data
    df_merged = pd.merge_asof(
        df_sentimento.sort_values('DataReferencia'),
        df_selic.reset_index().sort_values('Date').rename(columns={'Date': 'DataReferencia'}),
        on='DataReferencia',
        direction='backward'
    )
    
    # Gr√°fico dual-axis: Sentimento vs Selic
    ax1_twin = ax1.twinx()
    line1 = ax1.plot(df_merged['DataReferencia'], df_merged['sentimento'], 'b-', label='Sentimento')
    line2 = ax1_twin.plot(df_merged['DataReferencia'], df_merged['serie'], 'r-', label='Selic')
    
    ax1.set_ylabel('Score de Sentimento', color='b')
    ax1_twin.set_ylabel('Taxa Selic (%)', color='r')
    ax1.set_title('Evolu√ß√£o: Sentimento vs Taxa Selic')
    
    # Combinar legendas
    lines = line1 + line2
    labels = [l.get_label() for l in lines]
    ax1.legend(lines, labels, loc='upper left')
    
    # Scatter plot: correla√ß√£o direta
    ax2.scatter(df_merged['sentimento'], df_merged['serie'], alpha=0.6)
    
    # Calcular e mostrar correla√ß√£o
    correlation = df_merged[['sentimento', 'serie']].corr().iloc[0, 1]
    ax2.set_title(f'Correla√ß√£o Sentimento vs Selic\n(r = {correlation:.3f})')
    ax2.set_xlabel('Score de Sentimento')
    ax2.set_ylabel('Taxa Selic (%)')
    
    # Adicionar linha de tend√™ncia
    z = np.polyfit(df_merged['sentimento'].dropna(), df_merged['serie'].dropna(), 1)
    p = np.poly1d(z)
    ax2.plot(df_merged['sentimento'], p(df_merged['sentimento']), "r--", alpha=0.8)
    
    # An√°lise de defasagens (lags)
    lags = range(-12, 13)
    correlations = []
    for lag in lags:
        if lag == 0:
            corr = df_merged[['sentimento', 'serie']].corr().iloc[0, 1]
        elif lag > 0:
            corr = df_merged['sentimento'].corr(df_merged['serie'].shift(lag))
        else:
            corr = df_merged['sentimento'].shift(-lag).corr(df_merged['serie'])
        correlations.append(corr)
    
    ax3.bar(lags, correlations)
    ax3.set_title('Correla√ß√£o com Diferentes Defasagens')
    ax3.set_xlabel('Defasagem (meses)')
    ax3.set_ylabel('Correla√ß√£o')
    ax3.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    # Diferen√ßas e varia√ß√µes
    df_merged['delta_sentimento'] = df_merged['sentimento'].diff()
    df_merged['delta_selic'] = df_merged['serie'].diff()
    
    ax4.scatter(df_merged['delta_sentimento'], df_merged['delta_selic'], alpha=0.6)
    delta_corr = df_merged[['delta_sentimento', 'delta_selic']].corr().iloc[0, 1]
    ax4.set_title(f'Correla√ß√£o das Varia√ß√µes\n(r = {delta_corr:.3f})')
    ax4.set_xlabel('Œî Sentimento')
    ax4.set_ylabel('Œî Selic')
    
    plt.tight_layout()
    return fig

# === 7. EVENTOS EXTREMOS E OUTLIERS ===
def plot_eventos_extremos(df):
    """Identifica√ß√£o e an√°lise de eventos extremos"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # Definir outliers (usando IQR)
    Q1 = df['sentimento'].quantile(0.25)
    Q3 = df['sentimento'].quantile(0.75)
    IQR = Q3 - Q1
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR
    
    outliers = df[(df['sentimento'] < limite_inferior) | (df['sentimento'] > limite_superior)]
    
    # Timeline com eventos extremos destacados
    ax1.plot(df['DataReferencia'], df['sentimento'], 'o-', alpha=0.7)
    ax1.scatter(outliers['DataReferencia'], outliers['sentimento'], 
                color='red', s=100, marker='x', label=f'Outliers ({len(outliers)})')
    ax1.axhline(y=limite_superior, color='red', linestyle='--', alpha=0.5, label='Limites IQR')
    ax1.axhline(y=limite_inferior, color='red', linestyle='--', alpha=0.5)
    ax1.set_title('Identifica√ß√£o de Eventos Extremos')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Top 10 mais positivos e negativos
    top_positivos = df.nlargest(5, 'sentimento')
    top_negativos = df.nsmallest(5, 'sentimento')
    
    # Gr√°fico de barras dos extremos
    extremos = pd.concat([top_negativos, top_positivos])
    colors = ['red' if x < 0 else 'green' for x in extremos['sentimento']]
    
    ax2.barh(range(len(extremos)), extremos['sentimento'], color=colors, alpha=0.7)
    ax2.set_yticks(range(len(extremos)))
    ax2.set_yticklabels([f"{date.strftime('%Y-%m')}" for date in extremos['DataReferencia']])
    ax2.set_title('Top 5 Mais Positivos e Negativos')
    ax2.set_xlabel('Score de Sentimento')
    
    # An√°lise de clustering temporal
    df_sorted = df.sort_values('DataReferencia')
    df_sorted['sentimento_lag1'] = df_sorted['sentimento'].shift(1)
    
    ax3.scatter(df_sorted['sentimento_lag1'], df_sorted['sentimento'], alpha=0.6)
    ax3.set_title('Autocorrela√ß√£o: Sentimento(t) vs Sentimento(t-1)')
    ax3.set_xlabel('Sentimento Anterior')
    ax3.set_ylabel('Sentimento Atual')
    
    # Calcular autocorrela√ß√£o
    autocorr = df_sorted['sentimento'].autocorr(lag=1)
    ax3.text(0.05, 0.95, f'Autocorrela√ß√£o: {autocorr:.3f}', 
             transform=ax3.transAxes, bbox=dict(boxstyle="round", facecolor='wheat'))
    
    # Rolling statistics
    window = 6
    df_sorted['rolling_mean'] = df_sorted['sentimento'].rolling(window).mean()
    df_sorted['rolling_std'] = df_sorted['sentimento'].rolling(window).std()
    
    ax4.fill_between(df_sorted['DataReferencia'], 
                     df_sorted['rolling_mean'] - df_sorted['rolling_std'],
                     df_sorted['rolling_mean'] + df_sorted['rolling_std'],
                     alpha=0.3, label='¬±1 Desvio Padr√£o')
    ax4.plot(df_sorted['DataReferencia'], df_sorted['rolling_mean'], 'b-', label='M√©dia M√≥vel')
    ax4.plot(df_sorted['DataReferencia'], df_sorted['sentimento'], 'o', alpha=0.5, markersize=3)
    ax4.set_title(f'Bandas de Confian√ßa (janela = {window})')
    ax4.legend()
    
    plt.tight_layout()
    return fig


# === 6. CORRELA√á√ÉO COM SELIC (se dispon√≠vel) ===
def plot_correlacao_selic(df_sentimento, df_selic, salvar_como=None):
    """
    Plota an√°lise gr√°fica da correla√ß√£o entre sentimento das atas do COPOM e a taxa Selic.

    Par√¢metros:
        df_sentimento (pd.DataFrame): Deve conter ['DataReferencia', 'sentimento']
        df_selic (pd.DataFrame ou Series): DataFrame com √≠ndice datetime (ou coluna 'Date') e coluna 'serie'
        salvar_como (str): Caminho para salvar a figura (ex: "saida.png"). Se None, apenas exibe.

    Retorna:
        matplotlib.figure.Figure: Figura contendo os 4 subgr√°ficos
    """

    # ---- COPIAR os dataframes para preservar os originais
    sentimento = df_sentimento.copy()
    selic = df_selic.copy()

    # Garantir formato de data padronizado (sem timezone)
    sentimento['DataReferencia'] = pd.to_datetime(sentimento['DataReferencia']).dt.tz_localize(None)

    # Adaptar formato do DataFrame da Selic
    if 'Date' in selic.columns:
        selic = selic.rename(columns={'Date': 'DataReferencia'})
        selic['DataReferencia'] = pd.to_datetime(selic['DataReferencia']).dt.tz_localize(None)
    else:
        selic = selic.reset_index().rename(columns={selic.index.name: 'DataReferencia'})
        selic['DataReferencia'] = pd.to_datetime(selic['DataReferencia']).dt.tz_localize(None)

    # ---- Merge temporal por aproxima√ß√£o (para an√°lise)
    df_merged = pd.merge_asof(
        sentimento.sort_values('DataReferencia'),
        selic.sort_values('DataReferencia'),
        on='DataReferencia',
        direction='backward'
    )

    # ---- Criar figura
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

    # Gr√°fico 1: S√©rie temporal com dois eixos
    ax1_twin = ax1.twinx()
    line1 = ax1.plot(df_merged['DataReferencia'], df_merged['sentimento'], 'b-', label='Sentimento')
    line2 = ax1_twin.plot(df_merged['DataReferencia'], df_merged['serie'], 'r-', label='Selic')
    ax1.set_ylabel('Sentimento', color='b')
    ax1_twin.set_ylabel('Selic (%)', color='r')
    ax1.set_title('Evolu√ß√£o: Sentimento vs Taxa Selic')

    lines = line1 + line2
    labels = [l.get_label() for l in lines]
    ax1.legend(lines, labels, loc='upper left')

    # Gr√°fico 2: Correla√ß√£o direta
    ax2.scatter(df_merged['sentimento'], df_merged['serie'], alpha=0.6)
    corr = df_merged[['sentimento', 'serie']].corr().iloc[0, 1]
    ax2.set_title(f'Correla√ß√£o Sentimento vs Selic\n(r = {corr:.3f})')
    ax2.set_xlabel('Sentimento')
    ax2.set_ylabel('Selic (%)')

    z = np.polyfit(df_merged['sentimento'].dropna(), df_merged['serie'].dropna(), 1)
    ax2.plot(df_merged['sentimento'], np.poly1d(z)(df_merged['sentimento']), "r--", alpha=0.8)

    # Gr√°fico 3: Correla√ß√£o com defasagens
    lags = range(-12, 13)
    lag_corrs = []
    for lag in lags:
        if lag == 0:
            value = corr
        elif lag > 0:
            value = df_merged['sentimento'].corr(df_merged['serie'].shift(lag))
        else:
            value = df_merged['sentimento'].shift(-lag).corr(df_merged['serie'])
        lag_corrs.append(value)

    ax3.bar(lags, lag_corrs, color='gray')
    ax3.axhline(0, color='black', linestyle='--', alpha=0.5)
    ax3.set_title('Correla√ß√£o com Defasagens')
    ax3.set_xlabel('Defasagem (meses)')
    ax3.set_ylabel('Correla√ß√£o')

    # Gr√°fico 4: Correla√ß√£o das varia√ß√µes
    df_merged['delta_sentimento'] = df_merged['sentimento'].diff()
    df_merged['delta_selic'] = df_merged['serie'].diff()
    delta_corr = df_merged[['delta_sentimento', 'delta_selic']].corr().iloc[0, 1]
    ax4.scatter(df_merged['delta_sentimento'], df_merged['delta_selic'], alpha=0.6)
    ax4.set_title(f'Correla√ß√£o das Varia√ß√µes\n(r = {delta_corr:.3f})')
    ax4.set_xlabel('Œî Sentimento')
    ax4.set_ylabel('Œî Selic')

    plt.tight_layout()

    # Salvar se solicitado
    if salvar_como:
        fig.savefig(salvar_como, dpi=300, bbox_inches='tight')
        print(f"üíæ Gr√°fico salvo em: {salvar_como}")

    return fig


# === 8. PLOTAR SENTIMENTO COPOM ===

def plotar_sentimento_copom(sentimento, titulo="Evolu√ß√£o do Sentimento nas Atas do COPOM"):
    """
    Plota a evolu√ß√£o temporal do sentimento nas atas do COPOM com √°reas coloridas e pontos.

    Retorna:
        matplotlib.figure.Figure: objeto da figura (para salvar ou customizar)
    """
    
    # Verifica√ß√µes iniciais
    if sentimento is None or sentimento.empty:
        print("Erro: DataFrame de sentimento est√° vazio ou √© None")
        return None
    
    if 'DataReferencia' not in sentimento.columns or 'sentimento' not in sentimento.columns:
        print("Erro: Colunas 'DataReferencia' e/ou 'sentimento' n√£o encontradas")
        print(f"Colunas dispon√≠veis: {sentimento.columns.tolist()}")
        return None
    
    try:
        # Ordenar os dados por data
        sentimento = sentimento.sort_values("DataReferencia").copy()
        
        # Remover valores nulos
        sentimento = sentimento.dropna(subset=['DataReferencia', 'sentimento'])
        
        if sentimento.empty:
            print("Erro: N√£o h√° dados v√°lidos ap√≥s remo√ß√£o de valores nulos")
            return None

        # Criar figura e eixo
        fig, ax = plt.subplots(figsize=(16, 6))

        # √Årea verde para sentimentos positivos
        ax.fill_between(
            sentimento["DataReferencia"],
            0,
            sentimento["sentimento"],
            where=sentimento["sentimento"] > 0,
            interpolate=True,
            color="green",
            alpha=0.3,
            label="Sentimento Positivo"
        )

        # √Årea vermelha para sentimentos negativos
        ax.fill_between(
            sentimento["DataReferencia"],
            0,
            sentimento["sentimento"],
            where=sentimento["sentimento"] < 0,
            interpolate=True,
            color="red",
            alpha=0.3,
            label="Sentimento Negativo"
        )

        # Linha de sentimento
        ax.plot(
            sentimento["DataReferencia"],
            sentimento["sentimento"],
            color="black",
            linewidth=2,
            label="Evolu√ß√£o do Sentimento"
        )

        # Pontos
        ax.scatter(
            sentimento["DataReferencia"],
            sentimento["sentimento"],
            color="blue",
            s=50,
            alpha=0.7,
            zorder=5
        )

        # Linha horizontal no zero
        ax.axhline(y=0, color='gray', linestyle='-', alpha=0.5, linewidth=1)

        # T√≠tulos e formata√ß√£o
        ax.set_title(titulo, fontsize=16, weight="bold", loc="center", pad=20)
        fig.suptitle("An√°lise temporal usando dicion√°rio Loughran-McDonald", fontsize=12, y=0.92)
        ax.set_xlabel("Data da Reuni√£o", fontsize=12)
        ax.set_ylabel("√çndice de Sentimento", fontsize=12)
        
        # Rota√ß√£o dos labels do eixo x
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')
        
        # Grid
        ax.grid(axis='y', linestyle='--', alpha=0.5)
        ax.grid(axis='x', linestyle=':', alpha=0.3)

        # Legenda
        ax.legend(loc='upper right', fontsize=10)

        # Cr√©ditos
        fig.text(0.99, 0.01, "Dados: BCB", ha='right', fontsize=10)

        # Layout ajustado
        plt.tight_layout(rect=[0, 0.03, 1, 0.90])

        print(f"Gr√°fico criado com sucesso! Per√≠odo: {sentimento['DataReferencia'].min()} a {sentimento['DataReferencia'].max()}")
        print(f"N√∫mero de observa√ß√µes: {len(sentimento)}")
        
        return fig
        
    except Exception as e:
        print(f"Erro ao criar o gr√°fico: {str(e)}")
        import traceback
        traceback.print_exc()
        return None






